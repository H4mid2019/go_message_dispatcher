name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: messages_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Tidy dependencies
      run: go mod tidy

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

    - name: Run tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: messages_db_test
        DB_USER: postgres
        DB_PASSWORD: password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: go test -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            binary_suffix: '.exe'
            asset_name_suffix: 'windows-amd64'
          - goos: linux
            goarch: amd64
            binary_suffix: ''
            asset_name_suffix: 'linux-amd64'
          - goos: darwin
            goarch: arm64
            binary_suffix: ''
            asset_name_suffix: 'darwin-arm64'
          - goos: darwin
            goarch: amd64
            binary_suffix: ''
            asset_name_suffix: 'darwin-amd64'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Get version
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Build server binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p build
        BINARY_NAME="message-dispatcher-server-${{ steps.get_version.outputs.VERSION }}-${{ matrix.asset_name_suffix }}${{ matrix.binary_suffix }}"
        go build -a -installsuffix cgo \
          -ldflags="-w -s -X main.version=${{ steps.get_version.outputs.VERSION }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=$(git rev-parse HEAD)" \
          -o "build/${BINARY_NAME}" \
          ./cmd/server
        echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV

    - name: Build migrate binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        MIGRATE_BINARY_NAME="message-dispatcher-migrate-${{ steps.get_version.outputs.VERSION }}-${{ matrix.asset_name_suffix }}${{ matrix.binary_suffix }}"
        go build -a -installsuffix cgo \
          -ldflags="-w -s -X main.version=${{ steps.get_version.outputs.VERSION }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=$(git rev-parse HEAD)" \
          -o "build/${MIGRATE_BINARY_NAME}" \
          ./cmd/migrate
        echo "MIGRATE_BINARY_NAME=${MIGRATE_BINARY_NAME}" >> $GITHUB_ENV

    - name: Build mock API binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        MOCK_API_BINARY_NAME="mock-sms-api-${{ steps.get_version.outputs.VERSION }}-${{ matrix.asset_name_suffix }}${{ matrix.binary_suffix }}"
        go build -a -installsuffix cgo \
          -ldflags="-w -s" \
          -o "build/${MOCK_API_BINARY_NAME}" \
          ./cmd/mock-api
        echo "MOCK_API_BINARY_NAME=${MOCK_API_BINARY_NAME}" >> $GITHUB_ENV

    - name: Create archive
      run: |
        cd build
        ARCHIVE_NAME="message-dispatcher-${{ steps.get_version.outputs.VERSION }}-${{ matrix.asset_name_suffix }}"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          zip -r "${ARCHIVE_NAME}.zip" "${BINARY_NAME}" "${MIGRATE_BINARY_NAME}"
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
        else
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}" "${MIGRATE_BINARY_NAME}"
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: build/${{ env.ARCHIVE_NAME }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Get version and generate changelog
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog
        if git tag --sort=-version:refname | head -n 2 | tail -n 1 | grep -q .; then
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        else
          echo "PREVIOUS_TAG=" >> $GITHUB_OUTPUT
        fi

    - name: Generate Release Notes
      id: release_notes
      run: |
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md
        
        if [[ -n "${{ steps.get_version.outputs.PREVIOUS_TAG }}" ]]; then
          git log ${{ steps.get_version.outputs.PREVIOUS_TAG }}..${{ steps.get_version.outputs.VERSION }} \
            --pretty=format:"* %s (%h)" --no-merges >> release_notes.md
        else
          echo "* Initial release" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Downloads" >> release_notes.md
        echo "" >> release_notes.md
        echo "Choose the appropriate binary for your platform:" >> release_notes.md
        echo "* **Windows (64-bit)**: \`message-dispatcher-${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip\`" >> release_notes.md
        echo "* **Linux (64-bit)**: \`message-dispatcher-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz\`" >> release_notes.md
        echo "* **macOS (Intel)**: \`message-dispatcher-${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz\`" >> release_notes.md
        echo "* **macOS (Apple Silicon)**: \`message-dispatcher-${{ steps.get_version.outputs.VERSION }}-darwin-arm64.tar.gz\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download the appropriate archive for your platform" >> release_notes.md
        echo "2. Extract the archive" >> release_notes.md
        echo "3. Run the \`message-dispatcher-server\` binary" >> release_notes.md
        echo "4. Use \`message-dispatcher-migrate\` to set up the database" >> release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
        files: |
          artifacts/**/*.zip
          artifacts/**/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/message-dispatcher
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max